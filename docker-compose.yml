services:
  # IPFS Node for Fallback Transport
  ipfs:
    image: ipfs/kubo:v0.22.0
    container_name: chat-ipfs
    restart: unless-stopped
    environment:
      - IPFS_PROFILE=server
      - IPFS_LOGGING=info
    ports:
      - "4001:4001"
      - "4001:4001/udp" 
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - chat-network
    command: ["daemon", "--migrate=true", "--enable-pubsub-experiment"]
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Enhanced Chat Server with IPFS Integration
  chat-server:
    build:
      context: .
      target: production
    container_name: secure-chat-server
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - SOCKET_PORT=3001
      - MONGODB_URI=mongodb://chatadmin:${MONGO_PASSWORD}@mongodb:27017/secure_chat?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - IPFS_API_URL=http://ipfs:5001/api/v0
      - IPFS_PUBSUB_ENABLE=true
      - CORS_ORIGINS=http://localhost:3000,https://localhost:3000
    depends_on:
      - mongodb
      - redis
      - ipfs
    networks:
      - chat-network
    volumes:
      - chat-logs:/app/logs

  # MongoDB Database
  mongodb:
    image: mongo:6.0-focal
    container_name: chat-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-chatadmin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=secure_chat
    networks:
      - chat-network
    volumes:
      - mongodb-data:/data/db
    command: ["mongod", "--auth", "--bind_ip_all"]

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - chat-network
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]

networks:
  chat-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  ipfs-data:
    driver: local
  chat-logs:
    driver: local
